const { getConfigValue } = require("../../config/config-manager");
const { ConfigKeys } = require("../../config/enums");
const { isUndefined } = require("../compare.helpers");
const { formatYmd } = require("../datetime.helpers");
const seedrandom = require("seedrandom");

const generatorBasedOnCurrentDay = seedrandom(formatYmd(new Date()));

function getRandomVisitsForEntities(dataSet, min = 0, max = 10) {
  const visits = {};
  for (const entity of dataSet) {
    visits[entity.id] = getRandomInt(min, max);
  }

  return visits;
}

function getSeededRandomVisitsForEntities(dataSet, min = 0, max = 10) {
  const visits = {};
  for (const entity of dataSet) {
    visits[entity.id] = getRandomIntBasedOnDay(min, max);
  }

  return visits;
}

function getRandomIdBasedOnDay(length = 32) {
  var result = "";
  var charactersLength = getConfigValue(ConfigKeys.CHARACTERS).length;
  for (var i = 0; i < length; i++) {
    result += getConfigValue(ConfigKeys.CHARACTERS).charAt(Math.floor(generatorBasedOnCurrentDay() * charactersLength));
  }
  return result;
}

function getRandomIntBasedOnDay(min, max) {
  const randomValue = generatorBasedOnCurrentDay();
  const value = Math.floor(randomValue * (max - min) + min);
  return value;
}

const getRandomInt = (min, max) => {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive
};

function getGaussianRandom(min, max, sigma) {
  const mean = (max + min) / 2;

  if (isUndefined(sigma)) {
    sigma = (max - min) / 6;
  }

  let u = 0,
    v = 0;
  while (u === 0) u = Math.random(); // Converting [0,1) to (0,1)
  while (v === 0) v = Math.random();

  let z = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
  let randomValue = mean + z * sigma;

  return Math.max(min, Math.min(max, randomValue));
}

function getGaussianRandomInt(min, max, sigma) {
  return Math.round(getGaussianRandom(min, max, sigma));
}

/**
 * @class RandomValueGenerator
 * @classdesc Generates random values based on a seed.
 * @param {number|string} seed - The seed value for the random number generator.
 * @deprecated This class is obsolete and will be removed in future versions. Use a more modern random number generator library instead.
 */
class RandomValueGenerator {
  constructor(seed, power = 1) {
    this.seed = seed;
    this.currentIndex = 0;
    this.power = power;
  }

  getNextValue(min, max) {
    if (typeof this.seed === "string") {
      this.seed = this.seed.split("").reduce((acc, char) => acc + char.charCodeAt(0) * this.power, 0);
    }

    const random = Math.sin(this.seed + this.currentIndex) * 10000;
    const normalized = (random - Math.floor(random)) * (max - min + 1);
    const value = Math.floor(normalized) + min;

    this.currentIndex++;
    return value;
  }

  resetSeed(seed) {
    this.seed = seed;
    this.currentIndex = 0;
  }
}

class RandomValueGeneratorWithSeed {
  constructor(seed) {
    this.seed = seed;
    this.generator = seedrandom(seed);
  }

  getNextValue(min, max) {
    return Math.floor(this.generator() * (max - min + 1) + min);
  }

  getNextValueFloat(min, max) {
    return this.generator() * (max - min) + min;
  }

  resetSeed(seed) {
    this.seed = seed;
    this.generator = seedrandom(seed);
  }

  getNValuesFromList(list, n) {
    const values = [];
    for (let i = 0; i < n; i++) {
      values.push(list[this.getNextValue(0, list.length - 1)]);
    }

    return values;
  }
}

const randomTable = [
  0.9399996730335187, 0.5961048441949975, 0.44456401935148526, 0.9705930744524444, 0.23283627187029488,
  0.3476735890716769, 0.3499183971683306, 0.30609558231221534, 0.19413871364953983, 0.9945006926844043,
  0.23819069129825987, 0.31773386441669815, 0.8731611437035516, 0.7417798191437299, 0.292519104479403,
  0.6801446913226433, 0.6872329284264076, 0.1773876380567302, 0.86105865929101, 0.3553965153737184, 0.9296047088678099,
  0.637724385106585, 0.21496271293958746, 0.9509231127412133, 0.6638293519717196, 0.45400684047142814,
  0.6131052187080066, 0.5027813981732939, 0.5488060886647776, 0.11035918774451403, 0.7004114248873327,
  0.5455652526314068, 0.971941000737837, 0.49293460200181005, 0.46025928475749545, 0.833835149292668,
  0.1951453391120228, 0.0371685164230553, 0.07794653088600711, 0.1596059622336099, 0.040454679532668014,
  0.7737368695726319, 0.2765936369331048, 0.7622209957440349, 0.9527172660985331, 0.33517472932972436,
  0.7953618237120005, 0.6923818726847766, 0.47661697394164215, 0.35293358081141946, 0.9669919203331486,
  0.15412821590703618, 0.8389396414898023, 0.0051343548253592886, 0.35464589901167354, 0.25456971265992967,
  0.3287470282120454, 0.4737617845759795, 0.1918307851893829, 0.3384980019663464, 0.9195805029111414,
  0.5997452211159825, 0.2692624083879722, 0.11790154686595278, 0.7689217581854587, 0.25976755002268903,
  0.6997466809182734, 0.7076321434436993, 0.357414958651494, 0.19700583242265746, 0.8327328987928556,
  0.3395501425187446, 0.35855941054778007, 0.9517749089468339, 0.316923011030642, 0.8693944754320072,
  0.4071433114900145, 0.018465722701177523, 0.9290970540467759, 0.3277564579114065, 0.752359103788972,
  0.48400548854125736, 0.07675711165395593, 0.8942606987589033, 0.3779914626767209, 0.9269832146923743,
  0.20239002490736335, 0.8278442802173659, 0.19108013665597867, 0.21648902687834448, 0.1524043096584241,
  0.5213394374938872, 0.3887275201386914, 0.05002434702241654, 0.870926069334837, 0.42545864926509547,
  0.16295570305154772, 0.3040862146630836, 0.6134797718225462, 0.2563555258228878, 0.7084059947523756,
  0.3406088264068887, 0.3378055008382097, 0.7939118294285347, 0.3823854708512392, 0.22330177520375738,
  0.6521802849048994, 0.603424927492654, 0.7039165689220316, 0.902020849405851, 0.10642631553517634, 0.3961381197988765,
  0.42317101017094894, 0.42031965649956116, 0.09113926850974152, 0.5179147129034417, 0.8930168740205335,
  0.8526788151003775, 0.4548195604627223, 0.29842023712582455, 0.8486053700039079, 0.9037879911765102,
  0.3281938933377433, 0.35647320525539283, 0.6628872316471689, 0.3951135040145297, 0.37279192331917543,
  0.6835316211858757, 0.6406223828980546, 0.13851149387533013, 0.4241574396035377, 0.7411976837051235,
  0.8092067264820888, 0.62017823198537, 0.03407005881489522, 0.2711460444673328, 0.35415284346538, 0.4516148317261053,
  0.7239124398286788, 0.001371828473826997, 0.6041014703482186, 0.9398133832000616, 0.7924888983576592,
  0.296166047718213, 0.33641112189078115, 0.6654744043624552, 0.3586591182871848, 0.5380087870079752,
  0.9234406827906104, 0.4355600726261051, 0.5968631737598638, 0.7646087806594183, 0.9794059591007546,
  0.04739427040733424, 0.47524982046429465, 0.4022440461043637, 0.5008877509313066, 0.48694545994657845,
  0.025837600749618828, 0.9638016739078088, 0.43078637533649566, 0.922008438279338, 0.5181246562615395,
  0.2628770644923589, 0.11978950692964718, 0.4667402890508675, 0.05993105301678636, 0.8884218043408358,
  0.6970047204004112, 0.05191328973892906, 0.9898833455254883, 0.6708091284365106, 0.14553086655324055,
  0.42029241549456486, 0.6525041211766105, 0.5216347550000893, 0.6301915995257907, 0.5928906975910804,
  0.8461198551064497, 0.02277536974311456, 0.2557850520596566, 0.07773650586273928, 0.2793955821956885,
  0.26560592958678053, 0.0023459214784815607, 0.7022358997666037, 0.6606072587087011, 0.6437663713734316,
  0.32906965491703344, 0.9136443736156606, 0.3516442790236377, 0.943304958182973, 0.5661635950600897,
  0.10722671406572382, 0.11732092510892445, 0.9061751070778303, 0.53408168113474, 0.8691337724645666,
  0.23557058099407835, 0.871123389631573, 0.3840780488424964, 0.6371255445247774, 0.31359408656477816,
  0.11630952240473225, 0.7200000036543194, 0.5564572123314777, 0.18754311803039514, 0.07882564736181785,
  0.26959785362418065, 0.9355862364047924, 0.32467557650140333, 0.8264272403045408, 0.8776162119414926,
  0.15330521899211402, 0.9023906988167464, 0.37341276073839835, 0.13950019087454268, 0.4635133890610088,
  0.9846585068468393, 0.3865044372541986, 0.6383964895392742, 0.3384998271738069, 0.6025294319283018,
  0.13135263045943246, 0.3136372932513416, 0.968275419756866, 0.47285073934197175, 0.4437821799138859,
  0.48152535651023254, 0.2801887775313844, 0.22486525662935564, 0.6358275250855188, 0.8890337373491769,
  0.11128193606686332, 0.6704505676565246, 0.14710850490384175, 0.435806421106263, 0.8335010118777134,
  0.744518578924601, 0.15925310391263015, 0.9118570086265032, 0.7387474753371331, 0.8254355334088301,
  0.09770059817616117, 0.904852928087726, 0.8379589471227601, 0.35874397585233164, 0.14267322050049835,
  0.48878577806056034, 0.567705581303004, 0.904163263873525, 0.9576974980472786, 0.24085284261474627,
  0.6692381406083596, 0.6416194566958242, 0.5769312746435612,
];

let randomIndex = 0;

function getPRandomValue() {
  const value = randomTable[randomIndex];
  randomIndex = (randomIndex + 1) % randomTable.length;
  return value;
}

module.exports = {
  getRandomVisitsForEntities,
  getSeededRandomVisitsForEntities,
  getRandomInt,
  getPRandomValue,
  getGaussianRandomInt,
  getGaussianRandom,
  getRandomIdBasedOnDay,
  getRandomIntBasedOnDay,
  RandomValueGenerator,
  RandomValueGeneratorWithSeed,
};
