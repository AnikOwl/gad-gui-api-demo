const { RandomValueGeneratorWithSeed } = require("./random-data.generator");
const { logDebug } = require("../logger-api");

const possibleNames = [
  "John",
  "Jane",
  "Alice",
  "Bob",
  "Charlie",
  "David",
  "Eve",
  "Frank",
  "Grace",
  "Hank",
  "Ivy",
  "Jack",
  "Karl",
  "Lily",
  "Mary",
  "Nancy",
  "Oliver",
  "Peter",
  "Quinn",
  "Rose",
  "Sam",
  "Tom",
  "Uma",
  "Violet",
  "Will",
  "Xander",
  "Yara",
  "Zoe",
  "Ahmed",
  "Fatima",
  "Hassan",
  "Leila",
  "Aarav",
  "Anika",
  "Ravi",
  "Priya",
  "Chen",
  "Mei",
  "Liang",
  "Ying",
  "Hiroshi",
  "Aiko",
  "Kenji",
  "Sakura",
  "Ivan",
  "Natasha",
  "Mikhail",
  "Sofia",
  "Luca",
  "Giulia",
  "Marco",
  "Elena",
  "Carlos",
  "Maria",
  "Javier",
  "Isabella",
  "Pedro",
  "Fernanda",
  "Diego",
  "Lucia",
  "Hans",
  "Greta",
  "Lars",
  "Astrid",
  "Omar",
  "Noor",
  "Kareem",
  "Zara",
  "Nikolai",
  "Tatiana",
  "Andrei",
  "Ekaterina",
  "Liam",
  "Siobhan",
  "Cillian",
  "Aoife",
  "Hugo",
  "Clara",
  "Mathieu",
  "Elise",
  "Mateo",
  "Camila",
  "Sebastian",
  "Valeria",
  "Jonas",
  "Emma",
  "Sven",
  "Freya",
  "Alejandro",
  "Valentina",
  "Stefan",
  "Anya",
  "Milan",
  "Jana",
  "Tomas",
  "Adela",
  "Elias",
  "Mia",
  "Arjun",
  "Kavya",
  "Dmitry",
  "Alina",
  "Youssef",
  "Layla",
  "Thiago",
  "Bruna",
  "Miguel",
  "Lola",
  "Santiago",
  "Rosalia",
  "Ibrahim",
  "Amira",
  "Nina",
  "Viktor",
  "Elif",
  "Emre",
  "Selin",
  "Osman",
  "Huda",
  "Farid",
  "Amina",
  "Zahra",
  "Aiden",
  "Chloe",
  "Declan",
  "Harper",
  "Ellie",
  "Wyatt",
  "Jaxon",
  "Evelyn",
  "Liam",
  "Sophia",
  "Noah",
  "Olivia",
  "Ezra",
  "Abigail",
  "Lucas",
  "Ava",
  "Samuel",
  "Charlotte",
  "Aria",
  "Benjamin",
  "Ethan",
  "Levi",
  "Julian",
  "Jayden",
  "Isla",
  "Asher",
  "Aurora",
  "Axel",
  "Madeline",
  "Victoria",
  "Elsa",
  "Leila",
  "Adrian",
  "Sienna",
  "Jude",
  "Maddox",
  "Gabriel",
  "Isabel",
  "Andre",
  "Bianca",
  "Raphael",
  "Claudia",
  "Leonardo",
  "Ana",
  "Francisco",
  "Rosa",
  "Antonio",
  "Elvira",
  "Jacques",
  "Colette",
  "Guillaume",
  "Madeleine",
  "Mikhail",
  "Anastasia",
  "Riyad",
  "Salma",
  "Sergei",
  "Katya",
  "Artem",
  "Alisa",
  "Jens",
  "Heidi",
  "Nils",
  "Solveig",
  "Rune",
  "Ingrid",
  "Bartosz",
  "Zofia",
  "Jakub",
  "Kinga",
  "Maciej",
  "Agnieszka",
  "Gonzalo",
  "Carmen",
  "Joaquin",
  "Adriana",
  "Federico",
  "Lorena",
  "Danilo",
  "Mariana",
  "Gabriela",
  "Renato",
  "Monica",
  "Rodrigo",
  "Flavia",
];

const possibleSurnames = [
  "Smith",
  "Johnson",
  "Williams",
  "Brown",
  "Jones",
  "Garcia",
  "Martinez",
  "Davis",
  "Rodriguez",
  "Hernandez",
  "Lopez",
  "Gonzalez",
  "Wilson",
  "Anderson",
  "Thomas",
  "Taylor",
  "Moore",
  "Martin",
  "Lee",
  "Perez",
  "Thompson",
  "White",
  "Harris",
  "Sanchez",
  "Clark",
  "Ramirez",
  "Lewis",
  "Robinson",
  "Walker",
  "Young",
  "Allen",
  "King",
  "Scott",
  "Green",
  "Baker",
  "Adams",
  "Nelson",
  "Hill",
  "Ramsey",
  "Mitchell",
  "Campbell",
  "Carter",
  "Roberts",
  "Turner",
  "Phillips",
  "Parker",
  "Evans",
  "Edwards",
  "Collins",
  "Stewart",
  "Morris",
  "Flores",
  "Nguyen",
  "Murphy",
  "Rivera",
  "Cook",
  "Rogers",
  "Morgan",
  "Peterson",
  "Cooper",
  "Reed",
  "Bailey",
  "Bell",
  "Gomez",
  "Kelly",
  "Howard",
  "Ward",
  "Cox",
  "Diaz",
  "Richardson",
  "Wood",
  "Watson",
  "Brooks",
  "Bennett",
  "Gray",
  "James",
  "Reyes",
  "Hughes",
  "Price",
  "Myers",
  "Long",
  "Foster",
  "Sanders",
  "Ross",
  "Morales",
  "Powell",
  "Sullivan",
  "Russell",
  "Ortiz",
  "Jenkins",
  "Perry",
  "Butler",
  "Barnes",
  "Fisher",
  "Holland",
  "Freeman",
  "Bishop",
  "Wells",
  "Shaw",
  "Fowler",
  "Estrada",
  "Watts",
  "Patrick",
  "Arnold",
  "Guzman",
  "Cruz",
  "Vargas",
  "Mejia",
  "Hoffman",
  "Keller",
  "Lam",
  "Ng",
  "Chen",
  "Li",
  "Zhang",
  "Kim",
  "Choi",
  "Park",
  "Yamada",
  "Tanaka",
  "Kobayashi",
  "Ivanov",
  "Petrov",
  "Volkov",
  "Nikolaev",
  "Smirnov",
  "Kuznetsov",
  "Orlov",
  "Lebedev",
  "Popov",
  "Gupta",
  "Kowalski",
  "Kovacs",
  "Sharma",
  "Patel",
  "Khan",
  "Iqbal",
  "Mansour",
  "Farah",
  "Omar",
  "Abdullah",
  "Rahman",
  "Jensen",
  "Larsen",
  "Nielsen",
  "Hansen",
  "Christensen",
  "Eriksen",
  "Johansson",
  "Svensson",
  "Berg",
  "Nyström",
  "Hämäläinen",
  "Virtanen",
  "Mäkinen",
  "Korhonen",
  "Pereira",
  "Silva",
  "Oliveira",
  "Souza",
  "Costa",
  "Fernandes",
  "Rocha",
  "Castro",
  "Delgado",
  "Herrera",
  "Espinoza",
  "Soto",
  "Medina",
  "Valdez",
  "Navarro",
  "Montoya",
  "Cabrera",
  "Ruiz",
  "Franco",
  "Velasquez",
  "Barrera",
  "Torres",
  "Carrillo",
  "Vega",
  "Cervantes",
  "Dominguez",
  "Arroyo",
  "Luna",
  "Mendoza",
  "Hidalgo",
  "Ponce",
  "Marquez",
  "Padilla",
  "Quintero",
  "Valencia",
  "Cordero",
  "Gallardo",
  "Palacios",
  "Rios",
  "Calderon",
  "Campos",
  "Barros",
  "Neves",
  "Rodrigues",
  "Andrade",
  "Teixeira",
  "Melo",
  "Vieira",
  "Duarte",
  "Barbosa",
  "Magalhães",
];

const possibleSubjects = [
  "Math",
  "Science",
  "History",
  "Geography",
  "Literature",
  "Art",
  "Music",
  "Physical Education",
  "Chemistry",
  "Physics",
  "Biology",
  "Computer Science",
  "Economics",
  "Philosophy",
  "Psychology",
  "Sociology",
  "Political Science",
  "Law",
  "Medicine",
  "Engineering",
  "Architecture",
  "Business",
  "Management",
  "Marketing",
  "Finance",
  "Accounting",
  "Human Resources",
  "Operations",
  "Supply Chain",
  "Logistics",
  "Sales",
  "Customer Service",
  "Quality Assurance",
  "Product Management",
  "Project Management",
  "Program Management",
  "Portfolio Management",
  "Risk Management",
  "Compliance",
  "Legal",
  "Regulatory",
  "Audit",
  "Tax",
  "Treasury",
  "Investor Relations",
  "Public Relations",
  "Corporate Communications",
  "Internal Communications",
  "External Communications",
  "Social Media",
  "Digital Marketing",
  "Content Marketing",
  "Influencer Marketing",
  "Affiliate Marketing",
  "Email Marketing",
  "Search Engine Marketing",
  "Search Engine Optimization",
  "Pay-Per-Click",
  "Display Advertising",
  "Video Advertising",
  "Mobile Advertising",
  "Native Advertising",
  "Programmatic Advertising",
  "Ad Tech",
  "MarTech",
  "Marketing Automation",
  "Customer Relationship Management",
  "Customer Data Platform",
  "Data Management Platform",
  "Data Warehouse",
  "Data Lake",
  "Data Mart",
  "Data Mining",
  "Data Science",
  "Machine Learning",
  "Deep Learning",
  "Artificial Intelligence",
  "Natural Language Processing",
  "Computer Vision",
  "Speech Recognition",
  "Recommendation Engine",
  "Predictive Analytics",
  "Prescriptive Analytics",
  "Descriptive Analytics",
  "Diagnostic Analytics",
  "Big Data",
  "Data Analytics",
  "Data Visualization",
  "Business Intelligence",
  "Environmental Science",
  "Climate Change",
  "Renewable Energy",
  "Urban Planning",
  "Cybersecurity",
  "Blockchain",
  "Cryptography",
  "Quantum Computing",
  "Game Development",
  "Animation",
  "Graphic Design",
  "Web Development",
  "Mobile App Development",
  "User Experience Design",
  "User Interface Design",
  "Human-Computer Interaction",
  "Ergonomics",
  "Astronomy",
  "Astrophysics",
  "Geology",
  "Oceanography",
  "Meteorology",
  "Space Science",
  "Genetics",
  "Bioinformatics",
  "Biotechnology",
  "Agricultural Science",
  "Food Science",
  "Veterinary Science",
  "Healthcare Management",
  "Nursing",
  "Public Health",
  "Global Health",
  "Epidemiology",
  "Forensic Science",
  "Criminology",
  "Ethics",
  "Cultural Studies",
  "Linguistics",
  "Foreign Languages",
  "Translation Studies",
  "Education",
  "Pedagogy",
  "Special Education",
  "Early Childhood Education",
  "Instructional Design",
  "Sports Science",
  "Kinesiology",
  "Physical Therapy",
  "Occupational Therapy",
  "Speech Therapy",
  "Mental Health",
  "Counseling",
  "Social Work",
  "Community Development",
  "Nonprofit Management",
  "International Relations",
  "Conflict Resolution",
  "Peace Studies",
  "Anthropology",
  "Archaeology",
  "Theology",
  "Religious Studies",
];

const possibleClasses = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
];

const possibleCity = [
  "Kabul",
  "Tirana",
  "Algiers",
  "Andorra la Vella",
  "Luanda",
  "Saint John's",
  "Buenos Aires",
  "Yerevan",
  "Canberra",
  "Vienna",
  "Baku",
  "Nassau",
  "Manama",
  "Dhaka",
  "Bridgetown",
  "Minsk",
  "Brussels",
  "Belmopan",
  "Porto-Novo",
  "Thimphu",
  "La Paz",
  "Sucre",
  "Sarajevo",
  "Gaborone",
  "Brasília",
  "Bandar Seri Begawan",
  "Sofia",
  "Ouagadougou",
  "Gitega",
  "Phnom Penh",
  "Yaoundé",
  "Ottawa",
  "Praia",
  "Bangui",
  "N'Djamena",
  "Santiago",
  "Beijing",
  "Bogotá",
  "Moroni",
  "Kinshasa",
  "Brazzaville",
  "San José",
  "Zagreb",
  "Havana",
  "Nicosia",
  "Prague",
  "Copenhagen",
  "Djibouti",
  "Roseau",
  "Santo Domingo",
  "Quito",
  "Cairo",
  "San Salvador",
  "Malabo",
  "Asmara",
  "Tallinn",
  "Eswatini (Mbabane, Lobamba)",
  "Addis Ababa",
  "Suva",
  "Helsinki",
  "Paris",
  "Libreville",
  "Banjul",
  "Tbilisi",
  "Berlin",
  "Accra",
  "Athens",
  "Saint George's",
  "Guatemala City",
  "Conakry",
  "Bissau",
  "Georgetown",
  "Port-au-Prince",
  "Tegucigalpa",
  "Budapest",
  "Reykjavik",
  "New Delhi",
  "Jakarta",
  "Tehran",
  "Baghdad",
  "Dublin",
  "Jerusalem",
  "Rome",
  "Kingston",
  "Tokyo",
  "Amman",
  "Astana",
  "Nairobi",
  "Tarawa",
  "Pyongyang",
  "Seoul",
  "Pristina",
  "Kuwait City",
  "Bishkek",
  "Vientiane",
  "Riga",
  "Beirut",
  "Maseru",
  "Monrovia",
  "Tripoli",
  "Vaduz",
  "Vilnius",
  "Luxembourg",
  "Antananarivo",
  "Lilongwe",
  "Kuala Lumpur",
  "Malé",
  "Bamako",
  "Valletta",
  "Majuro",
  "Nouakchott",
  "Port Louis",
  "Mexico City",
  "Palikir",
  "Chisinau",
  "Monaco",
  "Ulaanbaatar",
  "Podgorica",
  "Rabat",
  "Maputo",
  "Naypyidaw",
  "Windhoek",
  "Yaren",
  "Kathmandu",
  "Amsterdam",
  "Wellington",
  "Managua",
  "Niamey",
  "Abuja",
  "Oslo",
  "Muscat",
  "Islamabad",
  "Ngerulmud",
  "Panama City",
  "Port Moresby",
  "Asunción",
  "Lima",
  "Manila",
  "Warsaw",
  "Lisbon",
  "Doha",
  "Bucharest",
  "Moscow",
  "Kigali",
  "Basseterre",
  "Castries",
  "Kingstown",
  "Apia",
  "San Marino",
  "Riyadh",
  "Dakar",
  "Belgrade",
  "Victoria",
  "Freetown",
  "Singapore",
  "Bratislava",
  "Ljubljana",
  "Honiara",
  "Mogadishu",
  "Pretoria",
  "Cape Town",
  "Bloemfontein",
  "Juba",
  "Madrid",
  "Sri Jayawardenepura Kotte",
  "Khartoum",
  "Paramaribo",
  "Stockholm",
  "Bern",
  "Damascus",
  "Taipei",
  "Dushanbe",
  "Dodoma",
  "Bangkok",
  "Dili",
  "Lomé",
  "Nukuʻalofa",
  "Port of Spain",
  "Tunis",
  "Ankara",
  "Ashgabat",
  "Funafuti",
  "Kampala",
  "Kyiv",
  "Abu Dhabi",
  "London",
  "Washington, D.C.",
  "Montevideo",
  "Tashkent",
  "Port Vila",
  "Vatican City",
  "Caracas",
  "Hanoi",
  "Sana'a",
  "Lusaka",
  "Harare",
];

function generateRandomStudent(dataGenerator, id) {
  if (dataGenerator === undefined) {
    dataGenerator = new RandomValueGeneratorWithSeed(Math.random().toString());
  }

  const firstName = possibleNames[dataGenerator.getNextValue(0, possibleNames.length - 1)];
  const lastName = possibleSurnames[dataGenerator.getNextValue(0, possibleSurnames.length - 1)];
  const name = `${firstName} ${lastName}`;
  const studentId = id || dataGenerator.getNextValue(0, 1000);
  const age = dataGenerator.getNextValue(18, 26);
  return {
    name,
    id: studentId,
    age,
  };
}

function generateRandomSubject(dataGenerator, id) {
  if (dataGenerator === undefined) {
    dataGenerator = new RandomValueGeneratorWithSeed(Math.random().toString());
  }

  const name = possibleSubjects[dataGenerator.getNextValue(0, possibleSubjects.length - 1)];
  const subjectId = id || dataGenerator.getNextValue(0, 1000);
  return {
    name,
    id: subjectId,
  };
}

function generateRandomClass(dataGenerator, id) {
  if (dataGenerator === undefined) {
    dataGenerator = new RandomValueGeneratorWithSeed(Math.random().toString());
  }

  const name = possibleClasses[dataGenerator.getNextValue(0, possibleClasses.length - 1)];
  const classId = id || dataGenerator.getNextValue(0, 1000);
  return {
    name,
    id: classId,
  };
}

function generateRandomStudents(dataGenerator, minStudents, maxStudents) {
  if (dataGenerator === undefined) {
    dataGenerator = new RandomValueGeneratorWithSeed(Math.random().toString());
  }

  const students = [];
  const studentCount = dataGenerator.getNextValue(minStudents, maxStudents);
  for (let i = 0; i < studentCount; i++) {
    students.push(generateRandomStudent(dataGenerator, i + 1));
  }
  return students;
}

function generateRandomSubjects(dataGenerator, minSubjects, maxSubjects) {
  if (dataGenerator === undefined) {
    dataGenerator = new RandomValueGeneratorWithSeed(Math.random().toString());
  }

  const subjects = [];
  const subjectCount = dataGenerator.getNextValue(minSubjects, maxSubjects);
  for (let i = 0; i < subjectCount; i++) {
    subjects.push(generateRandomSubject(dataGenerator, i + 1));
  }
  return subjects;
}

function generateRandomClasses(dataGenerator, minClasses, maxClasses) {
  if (dataGenerator === undefined) {
    dataGenerator = new RandomValueGeneratorWithSeed(Math.random().toString());
  }

  const classes = [];
  const classCount = dataGenerator.getNextValue(minClasses, maxClasses);
  for (let i = 0; i < classCount; i++) {
    classes.push(generateRandomClass(dataGenerator, i + 1));
  }
  return classes;
}

function generateRandomGrade(dataGenerator) {
  if (dataGenerator === undefined) {
    dataGenerator = new RandomValueGeneratorWithSeed(Math.random().toString());
  }

  const grade = dataGenerator.getNextValueFloat(0, 5);
  return grade.toFixed(1);
}

function generateRandomStudentsInClasses(dataGenerator, students, classes) {
  if (dataGenerator === undefined) {
    dataGenerator = new RandomValueGeneratorWithSeed(Math.random().toString());
  }

  const studentsInClasses = [];
  for (const _class of classes) {
    studentsInClasses.push({
      studentIds: [],
      classId: _class.id,
    });
  }

  for (const student of students) {
    const classGroup = studentsInClasses[dataGenerator.getNextValue(0, studentsInClasses.length - 1)];
    classGroup.studentIds.push(student.id);
  }
  return studentsInClasses;
}

function generateRandomGrades(dataGenerator, students, subjects) {
  if (dataGenerator === undefined) {
    dataGenerator = new RandomValueGeneratorWithSeed(Math.random().toString());
  }

  const grades = [];
  for (const student of students) {
    const studentGrades = [];
    for (const subject of subjects) {
      const gradesCount = dataGenerator.getNextValue(0, 5);
      const grades = [];
      for (let i = 0; i < gradesCount; i++) {
        grades.push(generateRandomGrade(dataGenerator));
      }
      studentGrades.push({
        subjectId: subject.id,
        grades,
      });
    }
    grades.push({
      studentId: student.id,
      subjectGradesPair: studentGrades,
    });
  }

  return grades;
}

const _defaultOptions = {
  minStudents: 10,
  maxStudents: 30,
  minSubjects: 5,
  maxSubjects: 10,
  minClasses: 3,
  maxClasses: 5,
  seed: Math.random().toString(),
};

function generateRandomStudentsData(options) {
  const userOptions = options || _defaultOptions;
  const generatorOptions = { ..._defaultOptions, ...userOptions };

  logDebug("Generating random students data with options:", generatorOptions);

  const dataGenerator = new RandomValueGeneratorWithSeed(options.seed);
  const students = generateRandomStudents(dataGenerator, generatorOptions.minStudents, generatorOptions.maxStudents);
  const subjects = generateRandomSubjects(dataGenerator, generatorOptions.minSubjects, generatorOptions.maxSubjects);
  const classes = generateRandomClasses(dataGenerator, generatorOptions.minClasses, generatorOptions.maxClasses);
  const studentsInClasses = generateRandomStudentsInClasses(dataGenerator, students, classes);
  const grades = generateRandomGrades(dataGenerator, students, subjects);

  logDebug("Generated random students data:", {
    students: students.length,
    subjects: subjects.length,
    classes: classes.length,
  });

  return {
    students,
    subjects,
    classes,
    studentsInClasses,
    grades,
  };
}

module.exports = {
  generateRandomStudentsData,
};
